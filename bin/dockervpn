#!/bin/bash

usage() {
    echo "
Docker VPN CLI usage and overview.

USAGE: $0 command [command-options]

To get detailed usage for a command, run:
    dockervpn help COMMAND

The list of commands is:

    backup       - backup up the /etc/openvpn directory to a tar file
    bash         - enter a bash shell in the container
    install      - install and run docker container
    getclient    - retrieve a client configuration file
    listclients  - display a list of configured clients
    listcustom   - display a list of custom file fragments
    ls           - list a directory in the container filesystem
    nano         - edit a file with the nano editor
    revokeclient - revoke a client certificate, they will no longer be able to connect
    removecustom - remove a custom fragment file
    start        - start a stopped openvpn container
    status       - display server status
    stop         - stop a running openpvn container
    uninstall    - stop and uninstall docker container (all configuration data will be lost)
    vi           - edit a file with the vi editor
"
}

# Detailed command help
# When called with no args, calls usage(), otherwise shows help for a command
cmd_help() {
	case "$1" in
        backup) echo "
    backup
        The contents of the /etc/openvpn directory in the container will be written to 
        a bzipped tar file in the current directory of the host machine. The file will 
        be called openvpn_data.tar.bz2.
        "
        ;;
        bash) echo "
    bash
        Enter a bash shell in the container.
        "
        ;;
        getclient) echo "
    getclient filename [customfile]
        filename is required. It is the path name of a local file to place the client
        configuration in. This file name will be parsed into directory/client.extension.
        for instance, /one/two/three.ovpn will be parsed into /one/two, three, ovpn. Then 
        three will be used as the clientname that is sent to the ovpn server, and three 
        would be the name that is listed in listclients.

        customfile is optional. It is the name of a file containing configuration to add to
        the client configuration file.
        
        If a client configuraton does not exist for clientname, then a new one is 
        generated, stored, and returned on standard output. If the client configuration
        does exist, it is retrieved and returned on standard output.

        A customfile is used to provide additional client configuration that is to be added
        to the client configuration file. For instance this can be used to configure mesh networking
        between client A and client B. With mesh networking, client A's traffic will be routed 
        through an Internet gateway connected to client B instead of through the vpn server. 
        If the customfile does not exist, then the nano editor is started for the user to enter 
        the custom configuration.

        Example custom configration file:
        Assuming the vpn server address has vpn address 10.8.0.1, and the vpn clients are on the
        10.8.0.0/24 network, the following is an example configuration lines to reroute traffic 
        from client A (10.8.0.2) to the internet gateway 192.168.2.1, which is connected via private 
        network to client B (10.8.0.8):

            pull-filter ignore redirect-gateway
            route-nopull
            route 192.168.2.0 255.255.255.0 10.8.0.8
            route 0.0.0.0 128.0.0.0 192.168.2.1
            route 128.0.0.0 128.0.0.0 192.168.2.1
        "
        ;;
        install) echo "
    install domain_name [vpn_port]
        Install and run the docker container - domain_name is required, vpn_port is optional. The
        container will be configured for vpn.domain_name so dns should resolve that name to the 
        correct vpn server address. The container will also be configured to listen on udp port 
        vpn_port (defaults to 1194). This dockervpn script will also be copied to /usr/local/bin.
        The docker container will be started with restart unless_stopped, so the vpn server should
        restart on host reboots unless it is stopped before the reboot.
        "
        ;;
        listclients) echo "
    listclients
        List the names of existing client configurations.
        "
        ;;
        listcustom) echo "
    listcustom
        List the names of existing custom fragment files.
        "
        ;;
        ls) echo "
    List a directory in the container filesystem.
        "
        ;;
        nano) echo "
    nano filepath/filename
        Edit a file in the container filesystem using the nano editor.
        "
        ;;
        revokeclient) echo "
    revokeclient clientname
        clientname is required. It is the name of an existing client whose access is to be denied.
        "
        ;;
        removecustom) echo "
    removecustom filename
        filename is required. It is the name of an existing custom file fragment to be removed.
        "
        ;;
        start) echo "
    start
        Start a stopped openvpn container.
        "
        ;;
        status) echo "
    status
        Display the vpn server status.
        "
        ;;
        stop) echo "
    stop
        Stop a running openvpn container.
        "
        ;;
        uninstall) echo "
    uninstall
        Remove the dockervpn script from /usr/local/bin, stop the docker container, and remove all docker
        artifacts (image, volumes, etc.) for the container including the configuration data volume. All 
        configuration data will be lost.
        "
        ;;
        vi) echo "
    vi filepath/filename
        Edit a file in the container filesystem using the vi editor.
        "
        ;;
    *)
        echo "Invalid command $1."
        usage
        exit 1
        ;;
    esac
}

backup() {
    docker run --rm --volumes-from openvpn -v $(pwd):/backup busybox tar cvf /backup/openvpn_data.tar /etc/openvpn
    bzip2 openvpn_data.tar
}

bash() {
    docker exec -it openvpn /bin/bash
}

getclient() {
    if [ -z "$1" ]; then
        >&2 echo "Client name is required.\n"
        >&2 cmd_help getclient
        exit 1
    fi
    dir=`dirname $1`
    fname=`basename $1`
    # extension="${filename##*.}"
    client="${fname%.*}"
    if [ ! -d "$dir" ]; then
        mkdir -p $dir
    fi 
    if [ -z "$2" ]; then
        docker exec -it openvpn /usr/local/bin/ovpn_makclient -n $client
    else
        docker exec -it openvpn /usr/local/bin/ovpn_makclient -n $client -f $2
    fi
    docker exec -it openvpn cat /etc/openvpn/configs/clients/$client.ovpn >$1
}

install() {
    if [ -z "$1" ]; then
        >&2 echo "Domain name is required.\n"
        >&2 cmd_help install
        exit 1
    fi
    if [ -z "$2" ]; then
        OPENVPN_PORT_NUMBER=1194
    else
        OPENVPN_PORT_NUMBER=$2
    fi
    cp $0 /usr/local/bin/dockervpn
    docker run -v openvpn_data:/etc/openvpn --rm -it castone38/dockervpn ovpn_genconfig \
        -u udp://vpn.$1 -C AES-256-GCM -c -a SHA256 -s "10.8.0.0/24" -d \
        -n "208.67.222.222 208.67.220.220" -e "explicit-exit-notify 1" \
        -e "ifconfig-pool-persist /etc/openvpn/ipp.txt" \
        -p "redirect-gateway def1 bypass-dhcp"
    docker run --name openvpn --restart unless-stopped -v openvpn_data:/etc/openvpn -d \
        -p $OPENVPN_PORT_NUMBER:1194/udp --cap-add=NET_ADMIN castone38/dockervpn
}

listclients() {
    docker exec -it openvpn /usr/local/bin/ovpn_listclients
}

listcustom() {
    docker exec -it openvpn /usr/local/bin/ovpn_listcustom
}

ls() {
    docker exec -it openvpn ls -AlF $1
}

nano() {
    docker exec -it openvpn nano $1
}

revokeclient() {
    if [ -z "$1" ]; then
        >&2 echo "Client name is required.\n"
        >&2 cmd_help revokeclient
        exit 1
    fi
    docker exec -it openvpn /usr/local/bin/ovpn_revokeclient $1
}

removecustom() {
    docker exec -it openvpn rm -f /etc/openvpn/configs/fragments/$1
}

start() {
    docker start openvpn
}

status() {
    docker exec -it openvpn /usr/local/bin/ovpn_status
}

stop() {
    docker stop openvpn
}

uninstall() {
    docker stop openvpn
    docker rm openvpn
    docker volume rm openvpn_data
    docker image rm castone38/dockervpn:latest
    rm -f /usr/local/bin/dockervpn
}

vi() {
    docker exec -it openvpn vi $1
}


amiroot=`id -u`
if (( $amiroot !=0 )); then
    echo "You must run this script as root, or with sudo."
    exit 1
fi

cmd="$1"
[ -n "$1" ] && shift # scrape off command
case "$cmd" in
    backup)
        backup
        ;;
    bash)
        bash
        ;;
	help)
        if [ -z "$@" ]; then
            usage
        else
		    cmd_help "$@"
        fi
		;;
    getclient)
        getclient "$@"
        ;;
    install)
        install "$@"
        ;;
    listclients)
        listclients
        ;;
    listcustom)
        listcustom
        ;;
    ls)
        ls "$@"
        ;;
    nano)
        nano "$@"
        ;;
    revokeclient)
        revokeclient "$@"
        ;;
    removecustom)
        removecustom "$@"
        ;;
    start)
        start
        ;;
    status)
        status
        ;;
    stop)
        stop
        ;;
    uninstall)
        uninstall
        ;;
    vi)
        vi "$@"
        ;;
    *)
        usage
        exit 1
    ;;
esac

exit 0
